/*

void AcquireTabletopServer::getDescriptorsFromTuples()
{

	ROS_INFO("Preparing...");
	const int image_numbers = 2;
	char _key[30];
	//descriptors_.resize(image_numbers);

	int id_for_tuple = 9898; //peiskmt_peisid();

	ros_over_peis::Subscriber <doro_msgs::SiftDescriptor> image_from_peis_sub1 ("tropicana.sift_descriptor.header");
	ros_over_peis::Subscriber <doro_msgs::SiftDescriptor> image_from_peis_sub2 ("ibumetin.sift_descriptor.header");
	ros_over_peis::Subscriber <doro_msgs::SiftDescriptor> image_from_peis_sub3 ("pandonil.sift_descriptor.header");
	ros_over_peis::Subscriber <doro_msgs::SiftDescriptor> image_from_peis_sub4 ("yoggi.sift_descriptor.header");

	doro_msgs::SiftDescriptor::Ptr desc1 = doro_msgs::SiftDescriptor::Ptr(new doro_msgs::SiftDescriptor);
	doro_msgs::SiftDescriptor::Ptr desc2 = doro_msgs::SiftDescriptor::Ptr(new doro_msgs::SiftDescriptor);
	doro_msgs::SiftDescriptor::Ptr desc3 = doro_msgs::SiftDescriptor::Ptr(new doro_msgs::SiftDescriptor);
	doro_msgs::SiftDescriptor::Ptr desc4 = doro_msgs::SiftDescriptor::Ptr(new doro_msgs::SiftDescriptor);

	image_from_peis_sub1.getMsg(desc1);
	image_from_peis_sub2.getMsg(desc2);
	image_from_peis_sub3.getMsg(desc3);
	image_from_peis_sub4.getMsg(desc4);

	while(!desc1)
		image_from_peis_sub1.getMsg(desc1);
	while(!desc2)
		image_from_peis_sub2.getMsg(desc2);
	while(!desc3)
		image_from_peis_sub3.getMsg(desc3);
	while(!desc4)
		image_from_peis_sub4.getMsg(desc4);

	peiskmt_subscribe(id_for_tuple, "tropicana.sift_descriptor.data");
	peiskmt_subscribe(id_for_tuple, "ibumetin.sift_descriptor.data");
	peiskmt_subscribe(id_for_tuple, "pandonil.sift_descriptor.data");
	peiskmt_subscribe(id_for_tuple, "yoggi.sift_descriptor.data");

	sleep(1);


	PeisTuple* recd_tuple1 = peiskmt_getTuple(id_for_tuple, "tropicana.sift_descriptor.data", PEISK_KEEP_OLD);
	printf("Getting data tuple 0...");
	while(!recd_tuple1)
	{
		recd_tuple1 = peiskmt_getTuple(id_for_tuple, "tropicana.sift_descriptor.data", PEISK_KEEP_OLD);
		sleep(1);
	}

	PeisTuple* recd_tuple2 = peiskmt_getTuple(id_for_tuple, "ibumetin.sift_descriptor.data", PEISK_KEEP_OLD);
	printf("Getting data tuple 1...\n");
	while(!recd_tuple2)
	{
		recd_tuple2 = peiskmt_getTuple(id_for_tuple, "ibumetin.sift_descriptor.data", PEISK_KEEP_OLD);
		sleep(1);
	}

	PeisTuple* recd_tuple3 = peiskmt_getTuple(id_for_tuple, "pandonil.sift_descriptor.data", PEISK_KEEP_OLD);
	printf("Getting data tuple 2...\n");
	while(!recd_tuple3)
	{
		recd_tuple3 = peiskmt_getTuple(id_for_tuple, "pandonil.sift_descriptor.data", PEISK_KEEP_OLD);
		sleep(1);
	}

	PeisTuple* recd_tuple4 = peiskmt_getTuple(id_for_tuple, "yoggi.sift_descriptor.data", PEISK_KEEP_OLD);
	printf("Getting data tuple 3...\n");
	while(!recd_tuple4)
	{
		recd_tuple4 = peiskmt_getTuple(id_for_tuple, "yoggi.sift_descriptor.data", PEISK_KEEP_OLD);
		sleep(1);
	}

	/** DESERIALIZE TO CV_MAT /
	cv::Mat recd_mat1(desc1->rows, desc1->cols, desc1->elem_type, (uchar *) recd_tuple1->data);
	cv::Mat recd_mat2(desc2->rows, desc2->cols, desc2->elem_type, (uchar *) recd_tuple2->data);
	cv::Mat recd_mat3(desc3->rows, desc3->cols, desc3->elem_type, (uchar *) recd_tuple3->data);
	cv::Mat recd_mat4(desc4->rows, desc4->cols, desc4->elem_type, (uchar *) recd_tuple4->data);

	descriptors_.push_back(recd_mat1.clone());
	descriptors_.push_back(recd_mat2.clone());
	descriptors_.push_back(recd_mat3.clone());
	descriptors_.push_back(recd_mat4.clone());

	ids_.push_back(desc1->id);
	ids_.push_back(desc2->id);
	ids_.push_back(desc3->id);
	ids_.push_back(desc4->id);

	//std::cout<<descriptors_[0];

	ROS_INFO("Done: Succeeded reading PEIS Tuples for SIFT Descriptors...");
}
*/
